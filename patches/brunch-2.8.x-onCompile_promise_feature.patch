From 7aa38290a5084e8f87ff8e4290ac91dabfab41b8 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?St=C3=A9phane=20MBAPE?= <rose.martin-8og3raxw@yopmail.com>
Date: Sat, 3 Sep 2016 12:32:38 +0200
Subject: [PATCH] onCompile can now return a promise

---
 lib/fs_utils/source_file.js |  2 +-
 lib/plugins.js              | 26 ++++++++++++++++++++++++--
 lib/watch.js                |  4 +++-
 3 files changed, 28 insertions(+), 4 deletions(-)

diff --git a/lib/fs_utils/source_file.js b/lib/fs_utils/source_file.js
index 4ff8c71..8c2442f 100644
--- a/lib/fs_utils/source_file.js
+++ b/lib/fs_utils/source_file.js
@@ -141,7 +141,7 @@ class SourceFile {
 
   dispose() {
     debug(`Disposing ${this.path}`);
-    this.path = '';
+    //this.path = '';
     this.targets = Object.freeze({});
     this.dependencies = Object.freeze([]);
     this.disposed = true;
diff --git a/lib/plugins.js b/lib/plugins.js
index de2b85e..e45aea2 100644
--- a/lib/plugins.js
+++ b/lib/plugins.js
@@ -230,8 +230,30 @@ exports.init = (config, onCompile) => {
 
   // Add default brunch callback.
   callbacks.push(onCompile);
-  const callCompileCallbacks = (generatedFiles, changedAssets) => {
-    callbacks.forEach(cb => cb(generatedFiles, changedAssets));
+  const callCompileCallbacks = (generatedFiles, changedAssets, done) => {
+    var count = 0;
+
+    take();
+    callbacks.forEach(cb => {
+      take();
+      const ret = cb(generatedFiles, changedAssets);
+      if (ret && 'object' === typeof ret && 'function' === typeof ret.then) {
+        ret.then(give);
+      } else {
+        give();
+      }
+    });
+    give();
+
+    function take() {
+      ++count;
+    }
+
+    function give(err) {
+      if (--count === 0) {
+        done();
+      }
+    }
   };
   const teardownBrunch = () => {
     teardowners.forEach(plugin => plugin.teardown());
diff --git a/lib/watch.js b/lib/watch.js
index 953fdd6..9fdc7f6 100644
--- a/lib/watch.js
+++ b/lib/watch.js
@@ -330,7 +330,9 @@ class BrunchWatcher {
       // Pass `fs_utils.GeneratedFile` instances to callbacks.
       // Does not block the execution.
       const assets = fileList.assets.filter(a => a.copyTime > startTime);
-      callback(generatedFiles, assets);
+      return new Promise(function(resolve, reject) {
+        callback(generatedFiles, assets, resolve);
+      });
     }, error => {
       fileList.emit('bundled');
       if (!Array.isArray(error)) error = [error];
-- 
2.6.2.windows.1

