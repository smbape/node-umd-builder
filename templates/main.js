/* Generated by umd builder */
<%
var require = root.require,
    __filename = root.__filename,
    __dirname = root.__dirname;

var util = require('util'),
    _ = require('lodash'),
    sysPath = require('path');

var config = _.cloneDeep(root.config),
    pathBrowserify = root.pathBrowserify;

function toString(obj) {
    return util.inspect(obj, {depth: null});
}

var isMain = false,
    isMainBuild = false,
    isMainDev = false,
    isUnit = false;

switch(root.type) {
    case 'unit':
        isUnit = true;
        config.baseUrl = '/base/' + root.paths.public + '/' + config.baseUrl;
        if (config.paths.angular) {
            config.paths['angular-mocks'] = ['/base/bower_components/angular-mocks/angular-mocks'];
            config.shim['angular-mocks'] = {
                exports: 'angular.module',
                deps: ['angular']
            };
        }
        break;
    case 'build':
        isMainBuild = true;
        if (!root.optimize) {
            config.optimize = 'none';
        }

        // path fallbacks are not supported by r.js
        for (var component in config.paths) {
            if (Array.isArray(config.paths[component])) {
                config.paths[component] = config.paths[component][0];
            }
        }

        config.baseUrl = '../' + root.paths.public + '/' + config.baseUrl;
        config.name = '../javascripts/main';
        config.out = '../' + root.paths.public + '/javascripts/main-built.js';

        break;
    case 'main':
        isMain = true;
        delete config.paths;
        delete config.shim;
        delete config.deps;
        break;
    case 'main-dev':
        isMainDev = true;
        break;
}

%>(function() {
    'use strict';

    <% if (!isMainBuild) { %>var appConfig = window.appConfig || (window.appConfig = {});<% } %>

    var config = <%= toString(config) %>;

    <% if (isMain || isMainDev) { %><%--

    --%>if (typeof appConfig.baseUrl === 'string') {
        config.baseUrl = appConfig.baseUrl + config.baseUrl;
    }<%--

    --%><% } %><%--

    --%><% if (isMainBuild) { %>
        <%-- TODO: entry point build --%>
        var basePath = '<%= sysPath.normalize(root.public).replace(/\\/g, '/') + '/' %>';

        var hasOwn = Object.prototype.hasOwnProperty,
            push = Array.prototype.push;

        var filenameMap = nodeRequire('<%= sysPath.normalize(root.root + '/work/filenameMap').replace(/\\/g, '/') %>');
        var modulesWithDefine = [];
        for (var filename in filenameMap) {
            modulesWithDefine.push(filenameMap[filename].name);
        }

        return augment(basePath, config);

        function augment(basePath, config) {
            config.modulesWithDefine = modulesWithDefine;
            config.onReadFile = onReadFile;
            push.apply(config.deps, modulesWithDefine);
            return config;

            function onReadFile(path, text) {
                var relativePath = path.substring(basePath.length);
                if (hasOwn.call(filenameMap, relativePath)) {
                    text = appendName(text, filenameMap[relativePath].name, filenameMap[relativePath].line, filenameMap[relativePath].col);
                }

                return text;
            }
        }

        function appendName(str, name, line, col) {
            var start = getIndex(str, line, col);
            var defstart = str.indexOf('(', start);
            return str.substring(0, defstart + 1) + "'" + name + '\', ' + str.substring(defstart + 1);
        }

        function getIndex(str, line, col) {
            var curr, index, lastIndex;
            if (line === 1) {
                return col;
            }
            curr = 1;
            index = 0;
            lastIndex = -1;
            while (~(index = str.indexOf('\n', index))) {
                lastIndex = index;
                index++;
                if (line === ++curr) {
                    break;
                }
            }
            return lastIndex + col;
        }<%--

    --%><% } else if (isUnit) { %>

    var groups = config.groups;
    delete config.groups;

    requirejs.config(config);

    if (groups) {
        var name, index, deps, group;
        for (name in groups) {
            deps = groups[name];
            group = name + '-group';
            define(group, deps, function(main) {
                return main;
            });

            index = config.deps.indexOf(name);
            if (index !== -1) {
                config.deps[index] = group;
            }
        }
    }

    var deps = config.deps;
    delete config.deps;

    require(['umd-core/src/depsLoader', 'umd-core/src/path-browserify'], function(depsLoader, pathBrowserify) {
        window.depsLoader = depsLoader;
        window.pathBrowserify = pathBrowserify;

        var allTestFiles = [];
        var TEST_REGEXP = /-test\.js$/;

        // add test files
        Object.keys(window.__karma__.files).forEach(function(file) {
            if (TEST_REGEXP.test(file)) {
                deps.push(pathToModule(file));
            }
        });

        // We have to kickoff testing framework,
        // after RequireJS is done with loading all the files.
        require(deps, window.__karma__.start);

        // Normalize a path to RequireJS module name.
        function pathToModule(path) {
            return pathBrowserify.relative(config.baseUrl, path).replace(/\.js$/, '');
        }
    });<%--

    --%><% } else if (isMain) { %>
        requirejs.config(config);
        require(['initialize']);<%--

    --%><% } else if (isMainDev) { %>

    var groups = config.groups;
    delete config.groups;

    requirejs.config(config);

    if (groups) {
        var name, index, deps, group;
        for (name in groups) {
            deps = groups[name];
            group = name + '-group';
            define(group, deps, function(main) {
                return main;
            });

            index = config.deps.indexOf(name);
            if (index !== -1) {
                config.deps[index] = group;
            }
        }
    }

    require(config.deps, function() {
        require(['initialize']);
    });

    <% } %>
}());
