/* Generated by umd builder */
<%
var require = root.require,
    __filename = root.__filename,
    __dirname = root.__dirname;

var util = require('util'),
    _ = require('lodash'),
    sysPath = require('path');

var config = _.cloneDeep(root.config),
    bundles = _.cloneDeep(root.bundles),
    pathBrowserify = root.pathBrowserify;

function toString(obj) {
    return util.inspect(obj, {depth: null});
}

var isMain = false,
    isMainBuild = false,
    isMainDev = false,
    isUnit = false;

switch(root.type) {
    case 'unit':
        isUnit = true;
        config.baseUrl = '/base/' + root.paths.public + '/' + config.baseUrl;
        config.paths['angular-mocks'] = ['/base/bower_components/angular-mocks/angular-mocks'];
        config.shim['angular-mocks'] = {
            exports: 'angular.module',
            deps: ['angular']
        };
        break;
    case 'build':
        isMainBuild = true;
        if (!root.optimize) {
            config.optimize = 'none';
        }

        // path fallbacks are not supported by r.js
        for (var component in config.paths) {
            config.paths[component] = config.paths[component][0];
        }

        config.baseUrl = '../' + root.paths.public + '/' + config.baseUrl;
        config.name = '../javascripts/main';
        config.out = '../' + root.paths.public + '/javascripts/main-built.js';

        break;
    case 'main':
        isMain = true;
        delete config.paths;
        delete config.shim;
        delete config.deps;
        break;
    case 'main-dev':
        isMainDev = true;
        break;
}

%>
(function() {
    'use strict';

    <% if (!isMainBuild) { %> window.appConfig || (window.appConfig = {}); <% } %>

    var config = <%= toString(config) %>;

    <% if (isMain || isMainDev) { %>
    if (!/\\.\\w+$/.test(window.location.pathname)) {
        if (typeof appConfig.baseUrl === 'string') {
            config.baseUrl = appConfig.baseUrl + config.baseUrl;
        } else {
            config.baseUrl = '/' + config.baseUrl;
        }
    }
    <% } %>

    <% if (isMainBuild) { %>
    var deps = config.deps;

    var bundles = <%= toString(bundles) %>,
        component, paths, bundleId;
    for (component in bundles) {
        paths = bundles[component];
        config.paths[component] = paths[0];
        deps.push(config.paths[component]);
        for (var i = 1, len = paths.length; i < len; i++) {
            deps.push(paths[i]);
        }
    }
    <% } else if (isMainDev || isUnit) { %>
    var deps = config.deps;

    var bundles = <%= toString(bundles) %>,
        component;

    for (component in bundles) {
        define(component, bundles[component], function(main) {
            return main;
        });
    }
    <% } %>
    <% if (isMainBuild) { %>
        var basePath = '<%= sysPath.normalize(root.public).replace(/\\/g, '/') + '/' %>';
        var augment = nodeRequire('<%= sysPath.normalize(root.root + '/work/raugment').replace(/\\/g, '/') %>');
        return augment(basePath, config);
    <% } else if (isUnit) { %>
        requirejs.config(config);

        delete config.deps;
        require(['umd-core/depsLoader', 'umd-core/path-browserify'], function(depsLoader, pathBrowserify) {
            window.depsLoader = depsLoader;
            window.pathBrowserify = pathBrowserify;

            var allTestFiles = [];
            var TEST_REGEXP = /-test\.js$/;

            // add test files
            Object.keys(window.__karma__.files).forEach(function(file) {
                if (TEST_REGEXP.test(file)) {
                    deps.push(pathToModule(file));
                }
            });

            // We have to kickoff testing framework,
            // after RequireJS is done with loading all the files.
            require(deps, window.__karma__.start);

            // Normalize a path to RequireJS module name.
            function pathToModule(path) {
                return pathBrowserify.relative(config.baseUrl, path).replace(/\.js$/, '');
            }
        });
    <% } else if (isMain) { %>
        requirejs.config(config);
        require(['initialize'], function() {});
    <% } else if (isMainDev) { %>
        requirejs.config(config);
        define(config.deps, function() {
            require(['initialize']);
        });
    <% } %>
}())
