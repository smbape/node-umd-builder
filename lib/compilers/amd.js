// Generated by CoffeeScript 1.10.0
var AmdCompiler, _, builder, customUmdWrapper, fs, log4js, logger, mkdirp, semLib, sysPath, writeData, writeSem;

log4js = global.log4js || (global.log4js = require('log4js'));

fs = require('fs');

mkdirp = require('mkdirp');

sysPath = require('path');

semLib = require('sem-lib');

_ = require('lodash');

logger = log4js.getLogger('AmdCompiler');

builder = require('../../').builder;

customUmdWrapper = function(data) {
  return "(function(require) {\n    var deps;\n\n    " + data + "\n\n    if (typeof process === 'object' && typeof process.platform !== 'undefined') {\n        // NodeJs\n        module.exports = depsLoader.common.call(this, require, 'node', deps, factory);\n    } else if (typeof define === 'function' && define.amd) {\n        // AMD\n        depsLoader.amd.call(this, deps, factory);\n    }\n}.call(this, require));";
};

writeSem = semLib.semCreate(Math.pow(2, 3), true);

writeData = function(data, dst) {
  writeSem.semTake(function() {
    var done;
    done = function(err) {
      writeSem.semGive();
    };
    mkdirp(sysPath.dirname(dst), function(err) {
      var writeStream;
      if (err) {
        return done(err);
      }
      writeStream = fs.createWriteStream(dst);
      writeStream.write(data, 'utf8', done);
      writeStream.end();
    });
  });
};

module.exports = AmdCompiler = (function() {
  AmdCompiler.prototype.brunchPlugin = true;

  AmdCompiler.prototype.type = 'javascript';

  AmdCompiler.prototype.completer = true;

  function AmdCompiler(config) {
    var UglifyJSOptimizer;
    if (config == null) {
      config = {};
    }
    this.options = _.extend({}, config);
    if (config.optimize) {
      try {
        UglifyJSOptimizer = require('uglify-js-brunch');
        this.options.optimizer = new UglifyJSOptimizer(config);
      } catch (undefined) {}
    }
    this.amdDestination = config.modules.amdDestination;
    this.sourceMaps = !!config.sourceMaps;
    this.amdDestination = config.modules.amdDestination;
    this.isCustomUmdModule = config.modules.isCustomUmdModule;
  }

  AmdCompiler.prototype.compile = function(params, next) {
    if (this.initialized) {
      return this._compile(params, next);
    }
    builder.initialize(this.options, (function(_this) {
      return function(config) {
        _this.paths = config.paths;
        _this.initialized = true;
        _this._compile(params, next);
      };
    })(this));
  };

  AmdCompiler.prototype._compile = function(params, next) {
    var data, dst, map, path;
    next(null, params);
    data = params.data, path = params.path, map = params.map;
    dst = sysPath.join(this.paths.PUBLIC_PATH, this.amdDestination(path) + '.js');
    if (this.isCustomUmdModule(path, data)) {
      data = customUmdWrapper(data);
    }
    if (this.options.optimizer) {
      this.options.optimizer.optimize({
        data: data,
        path: path,
        map: map
      }, function(err, arg) {
        var map, optimized, path;
        optimized = arg.data, path = arg.path, map = arg.map;
        if (err) {
          logger.error(err);
        }
        writeData(optimized || data, dst);
      });
      return;
    }
    writeData(data, dst);
  };

  return AmdCompiler;

})();
