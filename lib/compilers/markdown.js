// Generated by CoffeeScript 1.10.0
var MarkdownCompiler, defaultOptions, hljs, languages, marked, umd;

umd = require('umd-wrapper');

marked = require('marked');

hljs = require('highlight.js');

languages = hljs.listLanguages();

defaultOptions = {
  renderer: new marked.Renderer(),
  langPrefix: 'hljs lang-',
  highlight: function(code, lang) {
    if (lang === 'auto' || languages.indexOf(lang) === -1) {
      return hljs.highlightAuto(code).value;
    } else {
      return hljs.highlight(lang, code).value;
    }
  }
};

defaultOptions.renderer.heading = function(text, level) {
  var escapedText;
  escapedText = text.toLowerCase().replace(/[^\w]+/g, '-');
  return "<h" + level + ">\n    <a name=\"" + escapedText + "\" class=\"anchor\" href=\"#" + escapedText + "\"></a>\n    " + text + "\n</h" + level + ">";
};

module.exports = MarkdownCompiler = (function() {
  MarkdownCompiler.prototype.brunchPlugin = true;

  MarkdownCompiler.prototype.type = 'template';

  MarkdownCompiler.prototype.pattern = /\.(?:markdown|mdown|mkdn|md|mkd|mdwn|mdtxt|mdtext|text)$/;

  function MarkdownCompiler(config) {
    var options, prop;
    if (config == null) {
      config = {};
    }
    this.sourceMaps = !!config.sourceMaps;
    options = config.plugins && config.plugins.markdown || {};
    for (prop in defaultOptions) {
      if (!options[prop]) {
        options[prop] = defaultOptions[prop];
      }
    }
    marked.setOptions(options);
  }

  MarkdownCompiler.prototype.compile = function(params, next) {
    var data, map, path;
    data = params.data, path = params.path, map = params.map;
    data = umd(JSON.stringify(marked(data)));
    data = "(function(){ " + data + " }());";
    next(null, {
      data: data,
      path: path,
      map: map
    });
  };

  return MarkdownCompiler;

})();
