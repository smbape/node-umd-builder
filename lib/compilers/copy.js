// Generated by CoffeeScript 1.10.0
var AmdCompiler, _, builder, copyFile, copySem, debounce, fns, fs, hasOwnProperty, log4js, logger, mkdirp, semLib, sysPath, wait;

fs = require('fs');

mkdirp = require('mkdirp');

sysPath = require('path');

semLib = require('sem-lib');

log4js = global.log4js || (global.log4js = require('log4js'));

logger = log4js.getLogger('copy');

builder = require('../../');

_ = require('lodash');

copySem = semLib.semCreate(Math.pow(2, 2), true);

wait = Math.pow(2, 8);

fns = {};

hasOwnProperty = Object.prototype.hasOwnProperty;

debounce = function(plugin, src, dst, next) {
  fns[src] || (fns[src] = {});
  if (hasOwnProperty.call(fns[src], dst)) {
    return fns[src][dst];
  }
  return fns[src][dst] = _.debounce(function() {
    copySem.semTake(function() {
      var done;
      done = function(err) {
        next(err);
        copySem.semGive();
      };
      mkdirp(sysPath.dirname(dst), function(err) {
        var _dst, _src, readable, writable;
        if (err) {
          return done(err);
        }
        _src = sysPath.relative(plugin.paths.APPLICATION_PATH, src);
        _dst = sysPath.relative(plugin.paths.APPLICATION_PATH, dst);
        logger.info("\n    " + _src + "\n    " + _dst);
        readable = fs.createReadStream(src);
        writable = fs.createWriteStream(dst);
        readable.pipe(writable);
        writable.on('finish', done);
      });
    });
  }, wait);
};

copyFile = function(plugin, src, dst, next) {
  debounce(plugin, src, dst, next)();
};

module.exports = AmdCompiler = (function() {
  AmdCompiler.prototype.brunchPlugin = true;

  AmdCompiler.prototype.type = 'copy';

  AmdCompiler.prototype.typePattern = /^(?!(?:javascript|stylesheet)$)/;

  AmdCompiler.prototype.typeUndefined = true;

  AmdCompiler.prototype.completer = true;

  function AmdCompiler(config) {
    var i, len, opt, picked;
    if (config == null) {
      config = {};
    }
    picked = ['jsExtensions', 'paths', 'links'];
    this.options = {};
    for (i = 0, len = picked.length; i < len; i++) {
      opt = picked[i];
      this.options[opt] = config[opt];
    }
    this.amdDestination = config.modules.amdDestination;
  }

  AmdCompiler.prototype.compile = function(params, next) {
    if (this.initialized) {
      return this._compile(params, next);
    }
    builder.initialize(this.options, (function(_this) {
      return function(config) {
        _this.paths = config.paths;
        _this.initialized = true;
        _this._compile(params, next);
      };
    })(this));
  };

  AmdCompiler.prototype._compile = function(params, next) {
    var data, dst, map, path, src;
    data = params.data, path = params.path, map = params.map;
    src = sysPath.join(this.paths.APPLICATION_PATH, path);
    dst = sysPath.join(this.paths.PUBLIC_PATH, this.amdDestination(path, true));
    copyFile(this, src, dst, function(err) {
      next(err, params);
    });
  };

  return AmdCompiler;

})();
